const fs = require("fs");
const path = require("path");
const sharp = require("sharp");

// ___ –¢–æ–ª—å–∫–æ —ç—Ç–∏ –ø–∞–ø–∫–∏ –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è
const allowedPaths = ["src"];

async function processDirectory(directory) {
  const files = fs.readdirSync(directory);

  for (const file of files) {
    const fullPath = path.join(directory, file);
    const stat = fs.statSync(fullPath);

    if (stat.isDirectory()) {
      await processDirectory(fullPath); // –†–µ–∫—É—Ä—Å–∏—è –¥–ª—è –ø–æ–¥–ø–∞–ø–æ–∫
    } else if (/\.(jpg|jpeg|png)$/i.test(file)) {
      const webpPath = fullPath.replace(/\.(jpg|jpeg|png)$/i, ".webp");

      if (!fs.existsSync(webpPath)) {
        try {
          await sharp(fullPath).webp({ quality: 80 }).toFile(webpPath);
          console.log(`‚úÖ Converted ${fullPath} to WebP`);

          //!  –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
          // fs.unlinkSync(fullPath);
          // console.log(`üóëÔ∏è Deleted original: ${fullPath}`);
        } catch (err) {
          console.error(`‚ùå Error processing ${fullPath}:`, err);
        }
      }
    }
  }
}

async function main() {
  try {
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
    for (const folder of allowedPaths) {
      const fullPath = path.join(__dirname, folder);
      if (fs.existsSync(fullPath)) {
        console.log(`üîç Processing folder: ${fullPath}`);
        await processDirectory(fullPath);
      } else {
        console.warn(`‚ö†Ô∏è Folder not found: ${fullPath}`);
      }
    }
    console.log("‚ú® All conversions completed!");
  } catch (err) {
    console.error("üî• Critical error:", err);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫
main();
